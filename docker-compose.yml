services:
  # --- FastAPI Application Service ---
  backend_api:
    build: .
    container_name: astruxa_backend_api
    ports:
      - "5678:5678"
      - "8051:8000"
    # --- MEJORA: Definimos explícitamente las variables de entorno ---
    # Esto evita que una variable DATABASE_URL conflictiva del .env entre al contenedor.
    # Docker-compose leerá las variables del .env y las sustituirá aquí.
    environment:
      - POSTGRES_HOST=backend_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - ENV=${ENV}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    depends_on:
      backend_db:
        condition: service_healthy

  # --- TimescaleDB Service ---
  backend_db:
    image: timescale/timescaledb:latest-pg16
    container_name: astruxa_backend_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  # --- Servicio para ejecutar comandos y scripts ---
  runner:
    build: .
    # Aplicamos la misma mejora al runner
    environment:
      - POSTGRES_HOST=backend_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - ENV=${ENV}
    volumes:
      - .:/app
    depends_on:
      backend_db:
        condition: service_healthy

volumes:
  postgres_data:
